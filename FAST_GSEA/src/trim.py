#!/usr/bin/env python
from __future__ import division
__doc__="""
GOtrimmer script. Parse object data from a .obo file, and provide a subset of non-prokaryotic
and non obsolete GO-terms based on the lightest official Uniprot's gene ontology file (GO-basic.obo).
The file generated by this script will serve for non-prokaryotic GO-terms trimming.
Obo files are daily updated and can be found here : 
http://viewvc.geneontology.org/viewvc/GO-SVN/ontology-releases/YYYY-MM-DD/subsets/ (replace YYYY-MM-DD by currrent date)
Please notice that 'gosubset_prok' terms are not maitained since 2018/06 because they may be irrelevant. More
information here: https://github.com/geneontology/go-ontology/pull/16255
@requires: enrich.R output file (hyperesults.csv)
@requires: old GO-basic.obo file (< 2018/06 releases) or gosubset_prok.obo file.
"""

__author__ = 'Kevin Durimel'
__credits__ = ['PM 2Ring : http://stackoverflow.com/q/32989776/4014959']
__license__ = 'GPL'
__version__ = '3.0'
__maintainer__ = 'Kevin Durimel'
__email__ = 'k@durimel@gmail.com'
__status__ = 'Alpha'


import json
from collections import defaultdict
import os, sys, subprocess
import argparse 


all_objects = {}

def add_object(d, outputFile):
    """
    Add GO-terms objects only if they are non-prokaryotic
    and up to date (i.e non obsolete)
    """

    # Ignore obsolete terms
    output=open(outputFile,"a+")
    if "is_obsolete" in d:
        return
    #Gather desired data into a single list,
    # and store it in the main all_objects dict
    key = d["id"][0]
    is_a = d["subset"]
    if not "gosubset_prok" in is_a:
        is_a=""
        print is_a
    else: 
        output.write(str(key+str("\n")))
    #Remove the next line if you want to keep the is_a description info
    is_a = [s.partition(' ! ')[0] for s in is_a]
    all_objects[key] = d["subset: gosubset_prok"] + is_a


def mk_subset(oboFile,outputFile): 
    """
    Generates a GO-terms file subset based on a obo file.
    """
    if os.path.exists(outputFile):
        print 'Go prokaryotic subset already found, passing this step...'

    #else:
    print "Generating Go prokaryotic subset.."
    term_head = "[Term]"
    #A temporary dict to hold object data
    current = defaultdict(list)
    with open(oboFile) as f:
        #Skip header data
        for line in f:
            if line.rstrip() == term_head:
                break
        for line in f:
            line = line.rstrip()
            if not line:                   
                continue #ignore blank lines
            if line == term_head:
                add_object(current, outputFile) #end of term
                current = defaultdict(list)
            else:
                #accumulate object data
                key, _, val = line.partition(": ")
                current[key].append(val)

    if current:
        add_object(current, outputFile)    
        
    print "...ok"

def trim(goprok_txt,enrichmentResultsFile):
    print "Trimming obsolete and non-prokaryotic go terms from enrichment results: \n\
    CAUTION - Using this functionality may make you lose relevant prokaryotic GO-terms::\n\
    https://github.com/geneontology/go-ontology/issues/16077 \n\
    Please inspect your results carefully."
    subprocess.check_call('echo "GO:ID;Go term;Number of hits;Expected number of hits;Go level;P-value;Corrected p-value;Aspect" > '+\
        enrichmentResultsFile + '_cleaned.csv', shell = True)
    subprocess.check_call('grep -F -f ' + goprok_txt + ' ' + enrichmentResultsFile + ' >> ' +\
        enrichmentResultsFile + '_cleaned.csv', shell = True)
    print "...ok"
